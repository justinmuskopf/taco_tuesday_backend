# use CircleCI 2.0
version: 2 
jobs:
  # runs not using Workflows must have a `build` job as entry point
  build_and_test: 
    # directory where steps will run
    working_directory: ~/taco_tuesday_backend/taco-tuesday-rest-api
    # run the steps with Docker
    docker: 
      # ...with this image as the primary container; this is where all `steps` will run
      - image: circleci/openjdk:8-jdk-stretch 
    # a collection of executable commands
    steps: 
      # check out source code to working directory
      - checkout: 
          path: ~/taco_tuesday_backend
      # restore the saved cache after the first run or if `pom.xml` has changed
      - restore_cache: 
          # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          key: taco-tuesday-rest-api-{{ checksum "pom.xml" }}
      # gets the project dependencies
      - run: mvn dependency:go-offline 
      
      - save_cache: 
          paths:
            - ~/.m2
          key: taco-tuesday-rest-api-{{ checksum "pom.xml" }}
      
      - run: mvn package # run the actual tests
      # uploads the test metadata from the `target/surefire-reports` directory so that it can show up in the CircleCI dashboard. 
      - store_test_results: 
          # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: target/surefire-reports
      
      - store_artifacts: # store the uberjar as an artifact
          # Upload test summary for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: target/taco-tuesday-rest-api-0.0.${CIRCLE_BUILD_NUM}-SNAPSHOT.jar
      # See https://circleci.com/docs/2.0/deployment-integrations/ for deploy examples 
  deploy:
  publish_swagger:

workflows:
  version: 2
  build_and_test_workflow:
    jobs:
      - build_and_test:
        filters:
          branches:
            ignore:
              - deploy-production

  deploy_production_workflow:
    jobs:
      - build_and_test:
        filters:
          branches:
            only:
              - deploy-production
      - deploy:
          requires:
            - build_and_test:
              filters:
                branches:
                  only:
                    - deploy-production
      - publish_swagger:
          requires:
            - deploy:
              filters:
                branches:
                  only:
                    - deploy-production